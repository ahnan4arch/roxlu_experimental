# UPLOADER SETTINGS
# -----------------
# Uploaded states used in db:
#
#     -----------------------
#     0 - file has been added 
#     1 - file is currently being uploaded
#     2 - file is uploaded.
#     3 - file is uploaded and removed from disk.
#     -----------------------


# upload_url
# ----------
# The url that we use to post the file + fields to. This can be 
# something like: http://www.yourdomain.com/upload.php?act=new
#
upload_url=http://uploader.localhost/


# database_path
# -------------
# Path to the SQLite database on which we perform the queries. You can 
# use any database/table you want as long as we can get the right data 
# from it. See below for a description of the queries.
#
#        An example table could be:
#        --------------------------
#        id (INTEGER)                   - use this as "id_field" 
#        video_file (STRING)            - use this as "file_field"
#        upload_state (INTEGER)         - use this in the state queries (see below)
#
database_path=/Users/roxlu/Documents/programming/c++/roxlu/apps/examples/uploader/bin/data/database.db

# src_files_path
# --------------
# We assume that you store only a filename in the database. Therefore we 
# prepend this src_files_path to the file_field value and then pass it to 
# the upload handler. 
src_files_path=/Users/roxlu/Documents/programming/c++/roxlu/apps/examples/uploader/bin/data/videos/

# file_field
# ----------
# The field that contains the name of the file. This is just the name and the file
# must be stored in "src_files_path". 
file_field=video_file

# id_field
# --------
# The primary key field of an entry.
id_field=id

# get_total_entries_to_upload_query
# ----------------------------------
# Query that returns the count(), of the elements that we need to upload. 
# You need to return the entries that have an upload state of 0
#        
#         example
#         ------
#         select count() from videos where uploaded = 0
#         select count() from users where profile_image_upload_state = 0

#  or uploaded = 1
get_total_entries_to_upload_query=select count() from speeches where uploaded = 0

# get_entries_to_upload_query
# ---------------------------
# Almost the same as "get_total_entries_to_upload_query" except this function should
# return all the field/column names that you want to add to the post + which havent 
# been uploaded of course. So add a 'where' clause like: where uploaded = 0
get_entries_to_upload_query=select id, email, video_file from speeches where uploaded = 0

# set_upload_state_query
# -----------------------
# This query is used to change the upload state for a specific entry. We use
# printf() and pass the state as the first entry and the primary key value (id_field)
# as second one, both as integers:
#
#          example
#          -------
#          update videos set uploaded = %d where id %d
#          update users set profile_image_upload_state = %d where id = %d
#
set_upload_state_query=update speeches set uploaded = %d where id = %d

# reset_upload_state_query
# ------------------------
# When the application crashes while one of the files are just being uploaded
# we can retry when the application starts again. If you want to use this feature
# create a query qhich sets the upload state to '0' of the entries which currently
# have a state of 1.
#
#          example
#          -------
#          update videos set uploaded = 0 where uploaded = 1
#          update users set profile_image_upload_state = 0 where profile_image_upload_state = 1
#
reset_upload_state_query=update speeches set uploaded = 0 where uploaded = 1


# delete_files_query
# delete_after_days
# delete_after_hours
# must_delete
# ------------------
# It's possible to remove a file after a certain period, we need a query
# to fetch file that need to be removed. 
#     
#      delete_files_query:
#      -------------------
#      query we execute to get entries that you want to delete. normally
#      you want to return entries which have a uploaded status of '2'. 
#      This query should return the ID as first field and the file_field 
#      element as the second entry.
#
#               example:
#               --------
#               select id, video_file from speeches where uploaded = 2
#               select id, profile_image from users where uploaded = 2
#
#
#
#       delete_after_days:
#       ------------------
#       delete the file when the modification time of the file is older then X-days
#
#
#       delete_after_hours:
#       -------------------
#       you can be a bit more specific if you want to delete files every X-hours too,
#       we add the delete_after_days to the time we need to delete files.
#
#       must_delete:
#       ------------
#       set to 0 or 1 if you want to keep (0) or delete (1) the files
#       
#  
delete_files_query=select id, video_file from speeches where uploaded = 2
delete_after_days=5
delete_after_hours=3
must_delete=1

# fake_insert_query
# -----------------
# We created an auxilary util, the 'fake_uploader' which can be used to automitically
# insert new entries into the the database on a defined timeout, e.g. every second. 
# This can be handy to test performance, or your upload handler.
#
#          example
#          -------
#          insert into videos (name, email, video_file) values ("roxlu", "info@roxlu.com", "test.flv")
#          insert into users (name, profile_image) values ("roxlu", "roxlu.png")
fake_insert_query=insert into speeches (email, video_file) values ("info@roxlu.com", "test.flv")

# fake_insert_timeout_millis
# --------------------------
# Insert a new fake entry ever X-millis. Used by the fake inserter.
fake_insert_timeout_millis=4000
